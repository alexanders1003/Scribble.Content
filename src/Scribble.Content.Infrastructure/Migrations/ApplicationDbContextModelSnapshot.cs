// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Scribble.Content.Infrastructure.Contexts;

#nullable disable

namespace Scribble.Content.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlogsCategory", b =>
                {
                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid")
                        .HasColumnName("blog_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.HasKey("BlogId", "CategoryId")
                        .HasName("blogs_categories_pkey");

                    b.HasIndex("CategoryId");

                    b.ToTable("blogs_categories", (string)null);
                });

            modelBuilder.Entity("PostsTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.HasKey("PostId", "TagId")
                        .HasName("posts_tags_pkey");

                    b.HasIndex("TagId");

                    b.ToTable("posts_tags", (string)null);
                });

            modelBuilder.Entity("Scribble.Content.Models.BlogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("blog_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("BlogName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("blog_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("removed_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("blogs_pkey");

                    b.ToTable("blogs", (string)null);
                });

            modelBuilder.Entity("Scribble.Content.Models.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("category_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category_name");

                    b.HasKey("Id")
                        .HasName("categories_pkey");

                    b.HasIndex(new[] { "CategoryName" }, "categories_category_name_key")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Scribble.Content.Models.CommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("comments_pkey");

                    b.HasIndex("PostId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Scribble.Content.Models.FollowerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid")
                        .HasColumnName("blog_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uuid")
                        .HasColumnName("follower_id");

                    b.HasKey("Id")
                        .HasName("followers_pkey");

                    b.HasIndex("BlogId");

                    b.ToTable("followers", (string)null);
                });

            modelBuilder.Entity("Scribble.Content.Models.LikeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("like_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("likes_pkey");

                    b.HasIndex("PostId");

                    b.ToTable("likes", (string)null);
                });

            modelBuilder.Entity("Scribble.Content.Models.PostEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("post_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("BlogId")
                        .HasColumnType("uuid")
                        .HasColumnName("blog_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsPosted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_posted");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rejected");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("posts_pkey");

                    b.HasIndex("BlogId");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("Scribble.Content.Models.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tag_name");

                    b.HasKey("Id")
                        .HasName("tags_pkey");

                    b.HasIndex(new[] { "TagName" }, "tags_tag_name_key")
                        .IsUnique();

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("BlogsCategory", b =>
                {
                    b.HasOne("Scribble.Content.Models.BlogEntity", null)
                        .WithMany()
                        .HasForeignKey("BlogId")
                        .IsRequired()
                        .HasConstraintName("blogs_categories_blog_id_fkey");

                    b.HasOne("Scribble.Content.Models.CategoryEntity", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("blogs_categories_category_id_fkey");
                });

            modelBuilder.Entity("PostsTag", b =>
                {
                    b.HasOne("Scribble.Content.Models.PostEntity", null)
                        .WithMany()
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("posts_tags_post_id_fkey");

                    b.HasOne("Scribble.Content.Models.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("posts_tags_tag_id_fkey");
                });

            modelBuilder.Entity("Scribble.Content.Models.CommentEntity", b =>
                {
                    b.HasOne("Scribble.Content.Models.PostEntity", "PostEntity")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("comments_post_id_fkey");

                    b.Navigation("PostEntity");
                });

            modelBuilder.Entity("Scribble.Content.Models.FollowerEntity", b =>
                {
                    b.HasOne("Scribble.Content.Models.BlogEntity", "BlogEntity")
                        .WithMany("Followers")
                        .HasForeignKey("BlogId")
                        .IsRequired()
                        .HasConstraintName("followers_blog_id_fkey");

                    b.Navigation("BlogEntity");
                });

            modelBuilder.Entity("Scribble.Content.Models.LikeEntity", b =>
                {
                    b.HasOne("Scribble.Content.Models.PostEntity", "PostEntity")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("likes_post_id_fkey");

                    b.Navigation("PostEntity");
                });

            modelBuilder.Entity("Scribble.Content.Models.PostEntity", b =>
                {
                    b.HasOne("Scribble.Content.Models.BlogEntity", "BlogEntity")
                        .WithMany("Posts")
                        .HasForeignKey("BlogId")
                        .IsRequired()
                        .HasConstraintName("posts_blog_id_fkey");

                    b.Navigation("BlogEntity");
                });

            modelBuilder.Entity("Scribble.Content.Models.BlogEntity", b =>
                {
                    b.Navigation("Followers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Scribble.Content.Models.PostEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });
#pragma warning restore 612, 618
        }
    }
}
